# Pre-Facet Calibrator Calibration Pipeline
#
# Calibrator part of the basic Pre-Facet calibration pipeline:
# - requires LOFAR software version >= 2.17
# - expects shared filesystem, that all nodes can reach all files!
#   (E.g. a single workstation or compute cluster with shared filesystem
#   doesn't work on multiple nodes on CEP-2 or CEP3.)

### parameters you will need to adjust.
# averaging for the calibrator data
! avg_timestep         = 2   # averaging step needed to average the data to 4 seconds time resolution
! avg_freqstep         = 2   # averaging step needed to average the data to 4 ch/SB frequency resolution
# where to find the calibrator data
! cal_input_path       = /home/gijs/pipeline/data/
! cal_input_pattern    = L*.MS
# Either: the path to the skymodel for the calibrator (ASCII-file)
# or: the path to a directory with the skymodels for the different calibrators
! calibrator_path_skymodel = /usr/share/prefactor/skymodels/
# where to put the inspection plots generated by the pipeline
! inspection_directory     = /home/gijs/pipeline/inspection
# where to put the files with the calibration values that are to be transferred to the target
! cal_values_directory     = /home/gijs/pipeline/cal_values

# NDPPP-compatible pattern for baselines or stations to be flagged (may be an empty list, i.e.: [] )
! flag_baselines         = [ CS013HBA* ]
# name of the station that will be used as a reference for the phase-plots
! reference_station      = CS001HBA0

# pathes to the scripts etc.
# #### ToDo: get the scripts onto CEP3 and adjust the pathes here!
! calib_cal_parset          = /usr/share/prefactor/parsets/calibcal.parset
! find_skymodel_cal_auto    = /usr/lib/prefactor/scripts/find_skymodel_cal.py
! losoto_importer           = /usr/lib/prefactor/scripts/losotoImporter.py
! fitclock_script           = /usr/lib/prefactor/scripts/fit_clocktec_initialguess_losoto.py
! fitamps_script            = /usr/lib/prefactor/scripts/amplitudes_losoto_3.py
! plotsols_script           = /usr/lib/prefactor/scripts/examine_npys.py
! fit_XYoffset_script       = /usr/lib/prefactor/scripts/find_cal_global_phaseoffset_losoto.py
! plotphases_script         = /usr/lib/prefactor/scripts/plot_solutions_all_stations.py
! losoto_executable         = /usr/bin/losoto

# number of processes to use per step per node
! num_proc_per_node        = 24
# number of processes to use per step per node for tasks with high i/o (dppp or cp) or memory (eg calibration)
! num_proc_per_node_limit  = 4
# number of threads per process for NDPPP
! max_dppp_threads         = 8

# set this to True if you want the pipeline run to continue if single bands fail
! error_tolerance           =  False

### Stuff that you probably don't need to modify
# which steps to run 
pipeline.steps=[createmap_cal, ndppp_prep_cal, combine_data_cal_map, sky_cal, sky_cal_path, calib_cal, h5_imp_cal_map, h5imp_cal, mk_inspect_dir, copy_h5imp_cal, fitclock, ampl, plots, phase, plot_cal_phases, createmap_cal_pngs, copy_cal_pngs, createmap_cal_txts, copy_cal_txts, mk_cal_values_dir, createmap_cal_npys, copy_cal_npys]

# generate a mapfile of all the calibrator data
createmap_cal.control.kind            =   plugin
createmap_cal.control.type            =   createMapfile
createmap_cal.control.method          =   mapfile_from_folder
createmap_cal.control.mapfile_dir     =   input.output.mapfile_dir
createmap_cal.control.filename        =   createmap_cal.mapfile
createmap_cal.control.folder          =   {{ cal_input_path }}
createmap_cal.control.pattern         =   {{ cal_input_pattern }}

# run NDPPP on the calibrator data
ndppp_prep_cal.control.type                    = dppp
ndppp_prep_cal.control.max_per_node            = {{ num_proc_per_node_limit }}
ndppp_prep_cal.control.error_tolerance         = {{ error_tolerance }}
ndppp_prep_cal.argument.numthreads             = {{ max_dppp_threads }}
ndppp_prep_cal.argument.msin                   = createmap_cal.output.mapfile    # The input data.
ndppp_prep_cal.argument.msin.datacolumn        = DATA
ndppp_prep_cal.argument.msin.baseline          = CS*&; RS*&; CS*&RS*
ndppp_prep_cal.argument.msout.datacolumn       = DATA
ndppp_prep_cal.argument.msout.writefullresflag = False
ndppp_prep_cal.argument.msout.overwrite        = True ############
ndppp_prep_cal.argument.steps                  = [flag,filter,avg,flagamp]
ndppp_prep_cal.argument.flag.type              = preflagger
ndppp_prep_cal.argument.flag.baseline          = {{ flag_baselines }}
ndppp_prep_cal.argument.filter.type            = filter
ndppp_prep_cal.argument.filter.baseline        = CS*, RS*&&
ndppp_prep_cal.argument.filter.remove          = true                     # fully kick out the international stations.
ndppp_prep_cal.argument.avg.type               = average
ndppp_prep_cal.argument.avg.timestep           = {{ avg_timestep }}       # average to 4 second intervals , PLEASE ADJUST!
ndppp_prep_cal.argument.avg.freqstep           = {{ avg_freqstep }}       # average to 2 ch/SB , PLEASE ADJUST!
ndppp_prep_cal.argument.flagamp.type           = preflagger
ndppp_prep_cal.argument.flagamp.amplmin        = 1e-30

# combine all entries into one mapfile (just for the find_skymodel_cal_auto script)
combine_data_cal_map.control.kind            =   plugin
combine_data_cal_map.control.type            =   createMapfile
combine_data_cal_map.control.method          =   mapfile_all_to_one
combine_data_cal_map.control.mapfile_dir     =   input.output.mapfile_dir
combine_data_cal_map.control.filename        =   combine_data_cal_map.mapfile
combine_data_cal_map.control.mapfile_in      =   createmap_cal.output.mapfile

# find automatically the calibrator used and update the BBS calibration parset
sky_cal.control.type               = pythonplugin  
sky_cal.control.executable         = {{ find_skymodel_cal_auto }}
sky_cal.control.error_tolerance    = {{ error_tolerance }}
sky_cal.argument.flags             = [combine_data_cal_map.output.mapfile]
sky_cal.argument.DirSkymodelCal    = {{ calibrator_path_skymodel }}

## extract from the mapfile from sky_cal, the path to the skymodel (used by calib_cal)
sky_cal_path.control.kind              =  plugin
sky_cal_path.control.type              =  mapfilenamesFromMapfiles
sky_cal_path.control.mapfile_FilePath  =  sky_cal.output.SkymodelCal.mapfile

# now run BBS on the NDPPP-ed calibrator data.
calib_cal.control.type             =  python-calibrate-stand-alone
calib_cal.control.max_per_node     =  {{ num_proc_per_node }}
calib_cal.control.error_tolerance  =  {{ error_tolerance }}
calib_cal.argument.force           =  True
calib_cal.argument.observation     =  ndppp_prep_cal.output.mapfile  # mapfile for the NDPPP-ed calibrator data
calib_cal.argument.parset          =  {{ calib_cal_parset }}
calib_cal.argument.catalog         =  sky_cal_path.output.FilePath

# generate a mapfile with all files in a single entry
h5_imp_cal_map.control.kind               =  plugin
h5_imp_cal_map.control.type               =  createMapfile
h5_imp_cal_map.control.method             =  mapfile_all_to_one
h5_imp_cal_map.control.mapfile_in         =  ndppp_prep_cal.output.mapfile
h5_imp_cal_map.control.mapfile_dir        =  input.output.mapfile_dir
h5_imp_cal_map.control.filename           =  h5_imp_cal_map.mapfile

# import all instrument tables into one LoSoTo file
h5imp_cal.control.type            =  pythonplugin
h5imp_cal.control.executable      =  {{ losoto_importer }}
h5imp_cal.control.error_tolerance =  {{ error_tolerance }}
h5imp_cal.argument.flags          =  [h5_imp_cal_map.output.mapfile,h5imp_cal_losoto.h5]
h5imp_cal.argument.instrument     =  /instrument
h5imp_cal.argument.solsetName     =  sol000
h5imp_cal.argument.compression    =  7

# create the inspection_directory if needed
mk_inspect_dir.control.kind               =  plugin
mk_inspect_dir.control.type               =  makeDirectory
mk_inspect_dir.control.directory          =  {{ inspection_directory }}

# copy the LoSoTo file to the inspection_directory
copy_h5imp_cal.control.kind               =  recipe
copy_h5imp_cal.control.type               =  executable_args
copy_h5imp_cal.control.executable         =  /bin/cp
copy_h5imp_cal.control.mapfile_in         =  h5imp_cal.output.h5parm.mapfile
copy_h5imp_cal.control.inputkey           =  source
copy_h5imp_cal.control.arguments          =  [source,{{ inspection_directory }}]

# now run the script that does the clock-TEC fitting
fitclock.control.kind             = recipe
fitclock.control.type             = executable_args
fitclock.control.mapfile_in       = h5imp_cal.output.h5parm.mapfile
fitclock.control.executable       = {{ fitclock_script }}
# order for arguments is: [<input-filename>,<output-filename-base>,<NumThreads>]
fitclock.control.arguments        = [h5gvds,caldata_transfer,{{ num_proc_per_node }}]
fitclock.control.inputkey         = h5gvds

# now run the script that filters the amplitudes
ampl.control.kind             = recipe
ampl.control.type             = executable_args
ampl.control.mapfile_in       = h5imp_cal.output.h5parm.mapfile
ampl.control.executable       = {{ fitamps_script }}
# order for arguments is: [<input-filename>,<output-filename-base>,<num-ch/SB>,<subbans-to-flag>]
# subbans-to-flag = semicolon-sperated list of integers in double-quotes
# e.g.: ampl.control.arguments   = [h5gvds,caldata_transfer,4,"205;206;207"]
ampl.control.arguments        = [h5gvds,caldata_transfer,4,""]
ampl.control.inputkey         = h5gvds

# and generate some output plots
plots.control.kind             = recipe
plots.control.type             = executable_args
plots.control.mapfile_in       = h5imp_cal.output.h5parm.mapfile
plots.control.executable       = {{ plotsols_script }}
plots.control.skip_infile      = True
plots.control.arguments        = [caldata_transfer]   # Needs "<output-filename-base>" from the fitclock and ampl steps

# fit the phase difference between X and Y
phase.control.type            = pythonplugin
phase.control.executable      = {{ fit_XYoffset_script }}
# order for flags is: [<input-filename>,<output-filename-base>]
phase.argument.flags          = [h5imp_cal.output.h5parm.mapfile,caldata_transfer]

# plot the phase solutions from the phase-only calibration of the target
plot_cal_phases.control.kind                          =  recipe
plot_cal_phases.control.type                          =  executable_args
plot_cal_phases.control.executable                    =  {{ losoto_executable }}
plot_cal_phases.control.max_per_node                  =  {{ num_proc_per_node }}
plot_cal_phases.control.parsetasfile                  =  True
plot_cal_phases.control.args_format                   =  losoto
plot_cal_phases.control.mapfiles_in                   =  [h5imp_cal.output.h5parm.mapfile]
plot_cal_phases.control.inputkeys                     =  [hdf5file]
plot_cal_phases.argument.flags                        =  [hdf5file]
plot_cal_phases.argument.LoSoTo.Steps                 =  [plot]
plot_cal_phases.argument.LoSoTo.Solset                =  [sol000]
plot_cal_phases.argument.LoSoTo.Soltab                =  [sol000/phase000]
plot_cal_phases.argument.LoSoTo.SolType               =  [phase]
plot_cal_phases.argument.LoSoTo.ant                   =  []
plot_cal_phases.argument.LoSoTo.pol                   =  [XX,YY]
plot_cal_phases.argument.LoSoTo.dir                   =  [pointing]
plot_cal_phases.argument.LoSoTo.Steps.plot.Operation  =  PLOT
plot_cal_phases.argument.LoSoTo.Steps.plot.PlotType   =  2D
plot_cal_phases.argument.LoSoTo.Steps.plot.Axes       =  [time,freq]
plot_cal_phases.argument.LoSoTo.Steps.plot.TableAxis  =  [ant]
plot_cal_phases.argument.LoSoTo.Steps.plot.ColorAxis  =  [pol]
plot_cal_phases.argument.LoSoTo.Steps.plot.Reference  =  {{ reference_station }}
plot_cal_phases.argument.LoSoTo.Steps.plot.PlotFlag   =  False
plot_cal_phases.argument.LoSoTo.Steps.plot.Prefix     =  {{ inspection_directory }}/cal_phases_

# generate a mapfile of all the diagnostic pngs
createmap_cal_pngs.control.kind            =   plugin
createmap_cal_pngs.control.type            =   createMapfile
createmap_cal_pngs.control.method          =   mapfile_from_folder
createmap_cal_pngs.control.mapfile_dir     =   input.output.mapfile_dir
createmap_cal_pngs.control.filename        =   diagnostic_pngs.mapfile
createmap_cal_pngs.control.folder          =   input.output.working_directory/input.output.job_name
createmap_cal_pngs.control.pattern         =   *.png

# copy the diagnostic pngs to the inspection directory
copy_cal_pngs.control.kind               =  recipe
copy_cal_pngs.control.type               =  executable_args
copy_cal_pngs.control.executable         =  /bin/cp
copy_cal_pngs.control.max_per_node       =  {{ num_proc_per_node_limit }}
copy_cal_pngs.control.mapfile_in         =  createmap_cal_pngs.output.mapfile
copy_cal_pngs.control.inputkey           =  source
copy_cal_pngs.control.arguments          =  [source,{{ inspection_directory }}]

# generate a mapfile of all the diagnostic txts
createmap_cal_txts.control.kind            =   plugin
createmap_cal_txts.control.type            =   createMapfile
createmap_cal_txts.control.method          =   mapfile_from_folder
createmap_cal_txts.control.mapfile_dir     =   input.output.mapfile_dir
createmap_cal_txts.control.filename        =   diagnostic_txts.mapfile
createmap_cal_txts.control.folder          =   input.output.working_directory/input.output.job_name
createmap_cal_txts.control.pattern         =   *.txt

# copy the diagnostic txts to the inspection directory
copy_cal_txts.control.kind               =  recipe
copy_cal_txts.control.type               =  executable_args
copy_cal_txts.control.executable         =  /bin/cp
copy_cal_txts.control.max_per_node       =  {{ num_proc_per_node_limit }}
copy_cal_txts.control.mapfile_in         =  createmap_cal_txts.output.mapfile
copy_cal_txts.control.inputkey           =  source
copy_cal_txts.control.arguments          =  [source,{{ inspection_directory }}]

# create the cal_values_directory if needed
mk_cal_values_dir.control.kind               =  plugin
mk_cal_values_dir.control.type               =  makeDirectory
mk_cal_values_dir.control.directory          =  {{ cal_values_directory }}

# generate a mapfile of all the cal-value npys
createmap_cal_npys.control.kind            =   plugin
createmap_cal_npys.control.type            =   createMapfile
createmap_cal_npys.control.method          =   mapfile_from_folder
createmap_cal_npys.control.mapfile_dir     =   input.output.mapfile_dir
createmap_cal_npys.control.filename        =   cal_value_npys.mapfile
createmap_cal_npys.control.folder          =   input.output.working_directory/input.output.job_name
createmap_cal_npys.control.pattern         =   *.npy

# copy the cal-value npys to the cal-values directory
copy_cal_npys.control.kind               =  recipe
copy_cal_npys.control.type               =  executable_args
copy_cal_npys.control.executable         =  /bin/cp
copy_cal_npys.control.max_per_node       =  {{ num_proc_per_node_limit }}
copy_cal_npys.control.mapfile_in         =  createmap_cal_npys.output.mapfile
copy_cal_npys.control.inputkey           =  source
copy_cal_npys.control.arguments          =  [source,{{ cal_values_directory }}]
